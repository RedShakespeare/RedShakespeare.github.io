{"title":"","date":"2024-06-21T03:48:15.055Z","date_formatted":{"ll":"Jun 21, 2024","L":"06/21/2024","MM-DD":"06-21"},"updated":"2024-06-20T19:48:15.055Z","content":"<p>Bert我们一般使用方法是，加载预训练模型，在我们自己的任务上进行微调。但是我们有些时候会遇到这种情况，比如说，之前文章提到的，<br>\n我不想要你预训练模型中最后三层参数，而是使用我自己的方法重新初始化。</p>\n<p>首先解释一下为什么需要这么做？有的论文发现，bert越靠后面（越靠近顶层，也就是输出层），学到的知识越是笔记抽象高级的知识，越靠近预训练模型的任务情况，和我们自己的任务就不太相符，所以想要重新初始化，基于我们自己的任务从零学习。</p>\n<p>好了，代码是怎么实现？</p>\n<p>一般pytorch的初始化方法我就不说了，这个比较简单，之后可能有时间写一下，这里专门介绍一下bert里面如何去做。</p>\n<p>首先，我们看一下源代码，加载模型的时候是怎么加载的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model = model_class.from_pretrained(args.model_name_or_path, from_tf=<span class=\"built_in\">bool</span>(<span class=\"string\">&#x27;.ckpt&#x27;</span> <span class=\"keyword\">in</span> args.model_name_or_path), config=config)</span><br></pre></td></tr></table></figure>\n<p>链接在这里：<a href=\"https://github.com/DA-southampton/Read_Bert_Code/blob/0605619582f1bcd27144e2d76fac93cb16e44055/bert_read_step_to_step/run_classifier.py#L462\" target=\"_blank\">https://github.com/DA-southampton/Read_Bert_Code/blob/0605619582f1bcd27144e2d76fac93cb16e44055/bert_read_step_to_step/run_classifier.py#L462</a></p>\n<p>再执行到这里之后，会进入并执行这个函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">from_pretrained</span>(<span class=\"params\">cls, pretrained_model_name_or_path, *model_args, **kwargs</span>):</span><br></pre></td></tr></table></figure>\n<p>代码链接在这里看：<br>\n<a href=\"https://github.com/DA-southampton/Read_Bert_Code/blob/0605619582f1bcd27144e2d76fac93cb16e44055/bert_read_step_to_step/transformers/modeling_utils.py#L224\" target=\"_blank\">https://github.com/DA-southampton/Read_Bert_Code/blob/0605619582f1bcd27144e2d76fac93cb16e44055/bert_read_step_to_step/transformers/modeling_utils.py#L224</a></p>\n<p>这个函数就是我们要修改的函数，核心操作是这个操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module._load_from_state_dict(state_dict, prefix, local_metadata, <span class=\"literal\">True</span>, missing_keys, unexpected_keys, error_msgs)</span><br></pre></td></tr></table></figure>\n<p>代码位置在这里：<br>\n<a href=\"https://github.com/DA-southampton/Read_Bert_Code/blob/0605619582f1bcd27144e2d76fac93cb16e44055/bert_read_step_to_step/transformers/modeling_utils.py#L404\" target=\"_blank\">https://github.com/DA-southampton/Read_Bert_Code/blob/0605619582f1bcd27144e2d76fac93cb16e44055/bert_read_step_to_step/transformers/modeling_utils.py#L404</a></p>\n<p>主要是两个参数最重要：<br>\nmissing_keys：就是我们自己定义的模型有哪些没在预训练模型中，比如我们的模型现在是 BertForSequenceClassification ，那么这里结果就是 [‘classifier.weight’, ‘classifier.bias’]<br>\nunexpected_keys:预训练模型的参数有很多，这里的结果是定义的我们对哪些参数忽视，并不采用，这里的正常结果是这样的：[‘cls.predictions.bias’, ‘cls.predictions.transform.dense.weight’, ‘cls.predictions.transform.dense.bias’, ‘cls.predictions.transform.LayerNorm.weight’, ‘cls.predictions.transform.LayerNorm.bias’, ‘cls.predictions.decoder.weight’, ‘cls.seq_relationship.weight’, ‘cls.seq_relationship.bias’]</p>\n<p>重点来了，如果我们想要对第一层的query的进行重新初始化，怎么做？分两个步骤，第一步，定义你想要重新初始化哪些参数，第二步代入进去。看代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unexpected_keys =[<span class=\"string\">&#x27;bert.encoder.layer.0.attention.self.query.weight&#x27;</span>,<span class=\"string\">&#x27;bert.encoder.layer.0.attention.self.query.bias&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>就这么简单，这里定义了就可以</p>\n<p>代码位置在这里<br>\n<a href=\"https://github.com/DA-southampton/Read_Bert_Code/blob/0605619582f1bcd27144e2d76fac93cb16e44055/bert_read_step_to_step/transformers/modeling_utils.py#L364\" target=\"_blank\">https://github.com/DA-southampton/Read_Bert_Code/blob/0605619582f1bcd27144e2d76fac93cb16e44055/bert_read_step_to_step/transformers/modeling_utils.py#L364</a></p>\n","link":"links/NLP_ability/深度学习自然语言处理/Bert/解决老大难问题-如何一行代码带你随心所欲重新初始化bert的某些参数附Pytorch代码","comments":true,"plink":"http://www.ephesus.top/links/NLP_ability/深度学习自然语言处理/Bert/解决老大难问题-如何一行代码带你随心所欲重新初始化bert的某些参数附Pytorch代码/","reward":true}